@inject AppointmentTypeService AppointmentTypeService
@inject AppointmentService AppointmentService
@inject FileService FileService

<style>
    .msg {
        color: rgba(243,23,0,0.5);
    }

    .image {
        max-width:300px;
    }

    form label.width100 {
        width: 100%;
    }
</style>

<EditForm Model="@Appointment" OnValidSubmit="@SaveAppointment">
    <DataAnnotationsValidator />
    <label class="width100">
        Title:<br />
        <TelerikTextBox @bind-Value="@Appointment.Title" Width="100%" />
    </label>
    <br />

    <label class="width100">
        Appointment Type:<br />
        <TelerikComboBox Data="@AppointmentTypes" Placeholder="Appointment Type" ClearButton="false"
                         TextField="@nameof(AppointmentTypeDto.Name)" ValueField="@nameof(AppointmentTypeDto.AppointmentTypeId)" Filterable="true"
                         Id="@nameof(AppointmentTypeDto.AppointmentTypeId)"
                         @bind-Value="@Appointment.AppointmentTypeId">
        </TelerikComboBox>
    </label>
    <br />

    <label class="width100">
        Duration:<br />
        @GetDuration
    </label>
    <br />

    @if (Appointment.IsAllDay)
    {
        <label class="width100">
            Start:<br />
            <TelerikDatePicker Value="@Appointment.Start" ValueChanged="@( (DateTime d) => StartChanged(d) )"
                               ValueExpression="@( () => Appointment.Start )"
                               Max="@GetHigherDate()" Width="100%" />
        </label>
        <label class="width100">
            End:<br />
            <TelerikDatePicker Value="@Appointment.End" ValueChanged="@( (DateTime d) => EndChanged(d) )"
                               ValueExpression="@( () => Appointment.End)"
                               Min="@GetLowerDate()" Width="100%" />
        </label>
    }
    else
    {
        <label class="width100">
            Start:<br />
            <TelerikDateTimePicker Value="@Appointment.Start" ValueChanged="@( (DateTime d) => StartChanged(d) )"
                                   ValueExpression="@( () => Appointment.Start)"
                                   Max="@GetHigherDate()" Width="100%" />
        </label>
        <label class="width100">
            End:<br />
            <TelerikDateTimePicker Value="@Appointment.End" ValueChanged="@( (DateTime d) => EndChanged(d) )"
                                   ValueExpression="@( () => Appointment.End )"
                                   Min="@GetLowerDate()" Width="100%" />
        </label>
    }
    <br />

    <label class="width100">
        Patient: @Appointment.PatientName<br />
        <img class="image" src="@Picture" />
    </label>
    <br />

    <input type="checkbox" id="isConfirmed" class="k-checkbox" @bind="@Appointment.IsConfirmed">
    <label class="k-checkbox-label" for="isConfirmed">Confirmed?</label>
    <br />
    <br />

    <ValidationSummary />
    @if (ShowErrorMessage)
    {
        <span class="msg">@WrongRangeMessage</span>
    }

    <TelerikButton Enabled="@IsValid()" Primary="true">Save</TelerikButton>
    <TelerikButton OnClick="@CancelEditing" ButtonType="ButtonType.Button">Cancel</TelerikButton>
    <TelerikButton OnClick="@DeleteAppointment" ButtonType="ButtonType.Button">Delete</TelerikButton>

</EditForm>

@code{
    //communcation with the parent component where the scheduler is
    [Parameter] public AppointmentDto Appointment { get; set; }
    [Parameter] public EventCallback<string> OnAppointmentChanged { get; set; }

    List<AppointmentTypeDto> AppointmentTypes = new List<AppointmentTypeDto>();

    //UI related
    string WrongRangeMessage = "Start date must be before end date. We reset the selection, try again.";
    bool ShowErrorMessage { get; set; }
    string GetDuration => AppointmentTypes.FirstOrDefault(x => x.AppointmentTypeId == Appointment.AppointmentTypeId)?.Duration.ToString();
    private string Picture { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AppointmentTypes = await AppointmentTypeService.ListAsync();
        Appointment.AppointmentTypeId = AppointmentTypes[0].AppointmentTypeId;
        await LoadPicture();
    }

    private async Task LoadPicture()
    {
        var imgeData = await FileService.ReadPicture($"{Appointment.PatientName}.jpg");
        Picture = string.IsNullOrEmpty(imgeData) ? string.Empty : $"data:image/png;base64, {imgeData}";
    }

    private bool IsValid()
    {
        //re-implements the model validation to ensure the exra functionality in the form works
        //there are ways to extend the validators to also support range date validation but they
        //are beyond the scope of this example, and here we will do things in a simpler, more straightforward way
        //this is why range validation is also implemented with code here, not as validation attributes
        if (Appointment.Start != null &&
            Appointment.End != null &&
            Appointment.Start <= Appointment.End &&
            !string.IsNullOrWhiteSpace(Appointment.Title))
        {
            return true;
        }
        return false;
    }

    private async Task SaveAppointment()
    {
        if (IsValid())
        {
            await AppointmentService.EditAsync(Appointment);
            await OnAppointmentChanged.InvokeAsync(Appointment.Title);
        }
    }

    private async Task DeleteAppointment()
    {
        await AppointmentService.DeleteAsync(Appointment.AppointmentId);
        await OnAppointmentChanged.InvokeAsync(Appointment.Title);
    }

    private async Task CancelEditing()
    {
        await OnAppointmentChanged.InvokeAsync(Appointment.Title);
    }

    private void StartChanged(DateTime userChoice)
    {
        if (userChoice > GetHigherDate())
        {
            ShowErrorMessage = true;
        }
        else
        {
            Appointment.Start = userChoice;
            ShowErrorMessage = false;
        }
    }

    private void EndChanged(DateTime userChoice)
    {
        if (userChoice < GetLowerDate())
        {
            ShowErrorMessage = true;
        }
        else
        {
            Appointment.End = userChoice;
            ShowErrorMessage = false;
        }
    }

    private DateTime GetLowerDate()
    {
        return Appointment.Start <= Appointment.End ? Appointment.Start : Appointment.End;
    }

    private DateTime GetHigherDate()
    {
        return Appointment.Start >= Appointment.End ? Appointment.Start : Appointment.End;
    }

    private void AppointmentTypeSelected(int? id)
    {
        Appointment.AppointmentTypeId = id??0;
    }

}