@page "/clients"
@inject IJSRuntime JsRuntime
@inject ClientService ClientService

<h1>Clients</h1>

@if (Clients == null)
{
    <Spinner></Spinner>
}
else
{
    <div class="main-action">
        <button @onclick="@(() => CreateClick())" @onclick:stopPropagation="true" class="btn btn-primary">
            <span class="oi oi-plus" aria-hidden="true"></span> Add
        </button>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Full Name</th>
                <th>Email</th>
                <th>Salutation</th>
                <th>Preferred Name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var client in Clients)
            {
                <tr>
                    <td>
                        @client.ClientId
                    </td>
                    <td>
                        @if (IsAddOrEdit(@client.ClientId))
                        {
                            <input @bind="ToSave.FullName" />
                        }
                        else
                        {
                            @client.FullName
                        }
                    </td>
                    <td>
                        @if (IsAddOrEdit(@client.ClientId))
                        {
                            <input @bind="ToSave.EmailAddress" />
                        }
                        else
                        {
                            @client.EmailAddress
                        }
                    </td>
                    <td>
                        @if (IsAddOrEdit(@client.ClientId))
                        {
                            <input @bind="ToSave.Salutation" />
                        }
                        else
                        {
                            @client.Salutation
                        }
                    </td>
                    <td>
                        @if (IsAddOrEdit(@client.ClientId))
                        {
                            <input @bind="ToSave.PreferredName" />
                        }
                        else
                        {
                            @client.PreferredName
                        }
                    </td>
                    <td class="action-buttons">
                        @if (IsAddOrEdit(@client.ClientId))
                        {
                            <button @onclick="@(() => SaveClick())" @onclick:stopPropagation="true" class="btn btn-primary margin-5">

                                Save
                            </button>
                            <button @onclick="@(() => CancelClick())" @onclick:stopPropagation="true" class="btn btn-danger margin-5">

                                Cancel
                            </button>
                        }
                        else
                        {
                            <button @onclick="@(() => EditClick(client.ClientId))" @onclick:stopPropagation="true" class="btn btn-primary margin-5">
                                <EditIcon></EditIcon>
                                Edit
                            </button>

                            <button @onclick="@(() => DeleteClick(client.ClientId))" @onclick:stopPropagation="true" class="btn btn-danger margin-5">
                                <DeleteIcon></DeleteIcon>
                                Delete
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private ClientDto ToSave = new ClientDto();
    private List<ClientDto> Clients = new List<ClientDto>();

    protected override async Task OnInitializedAsync()
    {
        await ReloadData();
    }

    private void CreateClick()
    {
        if (Clients.Count == 0 || Clients[Clients.Count - 1].ClientId != 0)
        {
            ToSave = new ClientDto();
            Clients.Add(ToSave);
        }
    }

    private void EditClick(int id)
    {
        ToSave = Clients.Find(x => x.ClientId == id);
    }

    private async Task DeleteClick(int id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            await ClientService.DeleteAsync(id);
            await ReloadData();
        }
    }

    private async Task SaveClick()
    {
        if (ToSave.ClientId == 0)
        {
            var toCreate = new CreateClientRequest()
            {
                FullName = ToSave.FullName,
                EmailAddress = ToSave.EmailAddress,
                Salutation = ToSave.Salutation,
                PreferredDoctorId = ToSave.PreferredDoctorId,
                PreferredName = ToSave.PreferredName,
            };
            await ClientService.CreateAsync(toCreate);
        }
        else
        {
            var toUpdate = new UpdateClientRequest()
            {
                ClientId = ToSave.ClientId,
                FullName = ToSave.FullName,
                EmailAddress = ToSave.EmailAddress,
                Salutation = ToSave.Salutation,
                PreferredDoctorId = ToSave.PreferredDoctorId,
                PreferredName = ToSave.PreferredName,
            };

            await ClientService.EditAsync(toUpdate);
        }

        CancelClick();
        await ReloadData();
    }

    private void CancelClick()
    {
        if (ToSave.ClientId == 0)
        {
            Clients.RemoveAt(Clients.Count - 1);
        }
        ToSave = new ClientDto();
    }

    private bool IsAddOrEdit(int id)
    {
        return ToSave.ClientId == id;
    }

    private async Task ReloadData()
    {
        Clients = await ClientService.ListAsync();
    }
}
