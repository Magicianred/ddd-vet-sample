@page "/doctors"
@inject IJSRuntime JsRuntime
@inject DoctorService DoctorService

<h1>Doctors</h1>

@if (Doctors == null)
{
    <Spinner></Spinner>
}
else
{
    <div class="main-action">
        <button @onclick="@(() => CreateClick())" @onclick:stopPropagation="true" class="btn btn-primary">
            <span class="oi oi-plus" aria-hidden="true"></span> Add
        </button>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var doctor in Doctors)
            {
                <tr>
                    <td>
                        @doctor.DoctorId
                    </td>
                    <td>
                        @if (IsAddOrEdit(@doctor.DoctorId))
                        {
                            <input @bind="ToSave.Name" />
                        }
                        else
                        {
                            @doctor.Name
                        }
                    </td>
                    <td class="action-buttons">
                        @if (IsAddOrEdit(@doctor.DoctorId))
                        {
                            <button @onclick="@(() => SaveClick())" @onclick:stopPropagation="true" class="btn btn-primary margin-5">

                                Save
                            </button>
                            <button @onclick="@(() => CancelClick())" @onclick:stopPropagation="true" class="btn btn-danger margin-5">

                                Cancel
                            </button>
                        }
                        else
                        {
                            <button @onclick="@(() => EditClick(doctor.DoctorId))" @onclick:stopPropagation="true" class="btn btn-primary margin-5">
                                <EditIcon></EditIcon>
                                Edit
                            </button>

                            <button @onclick="@(() => DeleteClick(doctor.DoctorId))" @onclick:stopPropagation="true" class="btn btn-danger margin-5">
                                <DeleteIcon></DeleteIcon>
                                Delete
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private DoctorDto ToSave = new DoctorDto();
    private List<DoctorDto> Doctors = new List<DoctorDto>();

    protected override async Task OnInitializedAsync()
    {
        await ReloadData();
    }

    private void CreateClick()
    {
        if (Doctors.Count == 0 || Doctors[Doctors.Count - 1].DoctorId != 0)
        {
            ToSave = new DoctorDto();
            Doctors.Add(ToSave);
        }
    }

    private void EditClick(int id)
    {
        ToSave = Doctors.Find(x => x.DoctorId == id);
    }

    private async Task DeleteClick(int id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            await DoctorService.DeleteAsync(id);
            await ReloadData();
        }
    }

    private async Task SaveClick()
    {
        if (ToSave.DoctorId == 0)
        {
            var toCreate = new CreateDoctorRequest()
            {
                Name = ToSave.Name,
            };
            await DoctorService.CreateAsync(toCreate);
        }
        else
        {
            var toUpdate = new UpdateDoctorRequest()
            {
                DoctorId = ToSave.DoctorId,
                Name = ToSave.Name,
            };
            await DoctorService.EditAsync(toUpdate);
        }

        CancelClick();
        await ReloadData();
    }

    private void CancelClick()
    {
        if (ToSave.DoctorId == 0)
        {
            Doctors.RemoveAt(Doctors.Count - 1);
        }
        ToSave = new DoctorDto();
    }

    private bool IsAddOrEdit(int id)
    {
        return ToSave.DoctorId == id;
    }

    private async Task ReloadData()
    {
        Doctors = await DoctorService.ListAsync();
    }
}
